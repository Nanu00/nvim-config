local cmp = require'cmp'
local lspkind = require'lspkind'

local has_words_before = function()
  local line, col = unpack(vim.api.nvim_win_get_cursor(0))
  return col ~= 0 and vim.api.nvim_buf_get_lines(0, line - 1, line, true)[1]:sub(col, col):match("%s") == nil
end

local cmp_ultisnips_mappings = require("cmp_nvim_ultisnips.mappings")
cmp.setup{
    snippet = {
        expand = function(args)
          vim.fn["UltiSnips#Anon"](args.body)
        end,
      },
    -- mapping = {
    --     ['<C-k>'] = cmp.mapping.select_prev_item(),
    --     ['<C-j>'] = cmp.mapping.select_next_item(),
    --     ['<C-d>'] = cmp.mapping.scroll_docs(-4),
    --     ['<C-f>'] = cmp.mapping.scroll_docs(4),
    --     ['<C-Space>'] = cmp.mapping.complete(),
    --     ['<C-e>'] = cmp.mapping.close(),
    --     ['<CR>'] = cmp.mapping.confirm({ select = false }),
    --     -- ['<Tab>'] = function(fallback)
    --     --   if vim.fn.complete_info()["selected"] == -1 and vim.fn["UltiSnips#CanExpandSnippet"]() == 1 then
    --     --     press("<C-R>=UltiSnips#ExpandSnippet()<CR>")
    --     --   elseif vim.fn["UltiSnips#CanJumpForwards"]() == 1 then
    --     --     press("<ESC>:call UltiSnips#JumpForwards()<CR>")
    --     --   elseif cmp.visible() then
    --     --     cmp.select_next_item()
    --     --   elseif has_any_words_before() then
    --     --     press("<Tab>")
    --     --   else
    --     --     fallback()
    --     --   end
    --     -- end,
    --     -- ['<Tab>'] = cmp.mapping(cmp.mapping.select_next_item(), { 'i', 's' }),
    --     -- ['<S-Tab>'] = cmp.mapping(cmp.mapping.select_prev_item(), { 'i', 's' }),
    --     ["<Tab>"] = cmp.mapping(function(fallback)
    --         if cmp.visible() then
    --             cmp.select_next_item()
    --         elseif luasnip.expand_or_jumpable() then
    --             luasnip.expand_or_jump()
    --         elseif has_words_before() then
    --             cmp.complete()
    --         else
    --             fallback()
    --         end
    --     end, { "i", "s" }),
    --     ["<S-Tab>"] = cmp.mapping(function(fallback)
    --         if cmp.visible() then
    --             cmp.select_prev_item()
    --         elseif luasnip.jumpable(-1) then
    --             luasnip.jump(-1)
    --         else
    --             fallback()
    --         end
    --     end, { "i", "s" }),
    -- },
    mapping = {
        ["<Tab>"] = cmp.mapping(
            function(fallback)
                cmp_ultisnips_mappings.expand_or_jump_forwards(fallback)
            end,
            { "i", "s", --[[ "c" (to enable the mapping in command mode) ]] }
        ),
        ["<S-Tab>"] = cmp.mapping(
            function(fallback)
                cmp_ultisnips_mappings.jump_backwards(fallback)
            end,
            { "i", "s", --[[ "c" (to enable the mapping in command mode) ]] }
        ),
        ['<CR>'] = cmp.mapping.confirm({ select = false }),
        ['<C-k>'] = cmp.mapping.select_prev_item(),
        ['<C-j>'] = cmp.mapping.select_next_item(),
    },
    sources = cmp.config.sources({
        { name = 'nvim_lsp' },
        { name = 'treesittter' },
        { name = 'ultisnips' },
        { name = 'buffer' },
        { name = 'path' },
        { name = 'calc' },
        { name = 'crates' },
    }),
    formatting = {
        format = lspkind.cmp_format({
            with_text = true,
            menu = ({
                -- buffer = "[Buffer]",
                -- nvim_lsp = "[LSP]",
                -- ultisnips = "[USnip]",
                -- path = "[Path]",
            })
        })
    },
    completion = {
        -- completeopt = 'menu,menuone,insert',
    },
}

  -- Use buffer source for `/` (if you enabled `native_menu`, this won't work anymore).
cmp.setup.cmdline('/', {
    sources = {
        { name = 'buffer' }
    }
})

  -- Use cmdline & path source for ':' (if you enabled `native_menu`, this won't work anymore).
cmp.setup.cmdline(':', {
    sources = cmp.config.sources({
        { name = 'path' },
        { name = 'cmdline' }
    }),
    completion = {
        keyword_length = 3,
    }
})

-- The nvim-cmp almost supports LSP's capabilities so You should advertise it to LSP servers..
local capabilities = vim.lsp.protocol.make_client_capabilities()
capabilities = require('cmp_nvim_lsp').update_capabilities(capabilities)
